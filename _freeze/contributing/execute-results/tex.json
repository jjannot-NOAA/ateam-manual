{
  "hash": "2c68ada1642e74dc256f35a979de83d5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Contributing\"\nauthor: \"Jason E. Jannot\"\ndate: \"2025-06-04\"\noutput:\n  md_document:\n    variant: markdown_github\n---\n\n\n\n\n\n# How to Contribute\n\nThis document describes how to contribute to this project.\n\n- Great to have you here.\n- You can help make this project better!\n- Thank you for your efforts.\n\n\n## Code of Conduct\nThis project and everyone participating in it is governed by the [AFSC Code of Conduct](https://sites.google.com/noaa.gov/myafsc/home/about-afsc) as well as the [Github and Git Guidance and Best Practices for NMFS Users](https://nmfs-opensci.github.io/GitHub-Guide/).  By contributing to this project you agree to abide by these terms.\n\n## Team members\n\n**Lead**: Jason E. Jannot, NOAA Fisheries AFSC FMA Division, Seattle, WA.    \n\n**Contributors**:\n\n* Jennifer Cahalan, Pacific States Marine Fisheries Commission and AFSC FMA Division, Seattle, WA \n\n* Craig Faunce, NOAA Fisheries AFSC FMA Division, Seattle, WA\n\n* Phil Ganz, NOAA Fisheries Alaska Region Office, Seattle, WA \n\n* Christian Gredzens, NOAA Fisheries AFSC FMA Division, Seattle, WA\n\n* Andy Kingham, NOAA Fisheries AFSC FMA Division, Seattle, WA\n\n* Geoff Mayhew, NOAA Fisheries AFSC FMA Division, Seattle, WA\n\n## Getting Started\n* Make sure you have a GitHub account.\n* Clone the repository from GitHub to your local machine.\n* Questions? email jason.jannot@noaa.gov\n\n## Git Workflow for Collaborating\n\nA Git workflow is a recommendation for how to use Git to accomplish work in a consistent and productive manner. The goals is that the workflow enhances the effectiveness of the team and does not limit productivity. A good workflow proactively reduces the number of merge conflicts and merges that need to be reverted. The choice of workflow by a team should be a joint decision.  Jason's recommendation is to use the [GitFlow](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow) workflow because it accomplishes two important, but somewhat competing, tactics to reduce merge conflicts when collaborating with git:\n\n  1. **Branch life should be minimized**\nThe risk of merge conflicts increase in proportion to the time the branch has been separate from the main branch. Short-lived branches promote cleaner merges.\n\n  2. **Branches should be tested before merging**\nTesting a branch before merging into the main branch reduces problems. However, accidents happen, thus a good workflow allows for easy reverts that don't cause issues for other contributors.\n\n*Having said all that, I welcome all discussions on how to best develop our Git workflow!* - Jason.\n\nFor those interested a comparison of Git workflows can be found [here](https://www.atlassian.com/git/tutorials/comparing-workflows).\n\n## Data\nNo PII or BII data or data that could identify fishers, individual fishing locations, or individual processors should be saved to this repository.  Any such data will be removed immediately.  For further guidance see: [Github and Git Guidance and Best Practices for NMFS Users](https://nmfs-opensci.github.io/GitHub-Guide/).\n\n## Fixing typos\n\nYou can fix typos, spelling mistakes, or grammatical errors in the documentation directly using the GitHub web interface, as long as the changes are made in the _source_ file. \nThis generally means you'll need to edit [roxygen2 comments](https://roxygen2.r-lib.org/articles/roxygen2.html) in an `.R`, not a `.Rd` file. \nYou can find the `.R` file that generates the `.Rd` by reading the comment in the first line.\n\n## Bigger changes\n\nIf you want to make a bigger change, it's a good idea to first file an issue and make sure someone from the team agrees that it’s needed. \nIf you’ve found a bug, please file an issue that illustrates the bug with a minimal \n[reprex](https://www.tidyverse.org/help/#reprex) (this will also help you write a unit test, if needed).\nSee the tidyverse guide on [how to create a great issue](https://code-review.tidyverse.org/issues/) for more advice.\nOther sources for issue best practices are described in various places on the web, such as [here](https://medium.com/nyc-planning-digital/writing-a-proper-github-issue-97427d62a20f) and [here](https://rewind.com/blog/best-practices-for-using-github-issues/).\n  \n\n## Making Changes\nThe following uses the Gitflow method as the workflow.\n\n* Clone the package onto your computer. If you haven't done this before, we recommend using `usethis::create_from_github(\">>_INSERT_PATH_TO_FILE<<\", fork = TRUE)`.\n* Pull the most recent code.\n* Create a Git branch for your pull request (PR). We recommend using `usethis::pr_init(\"brief-description-of-change\")`.\n* Make your changes.\n* Commit your changes. See the [Git Commit Messages] styleguide below.\n* Push your changes to the remote Github repository.\n* Go to Github and create a 'pull request' e.g., by running `usethis::pr_push()`, and following the prompts in your browser. The title of your PR should briefly describe the change.See the [Pull Requests Messages] section below.\n* Assign a reviewer.    \n  \n## Styleguides\n\n### Git Commit Messages\nAs a general rule, you should commit when you finish something that allows your code to work - usually ends up being a couple times an hour.\n\n* Use the present tense (\"Add feature\" not \"Added feature\")\n* Use the imperative mood (\"Move cursor to...\" not \"Moves cursor to...\")\n* Limit the first line to 72 characters or less\n* Reference issues and pull requests liberally after the first line\n\n### Pull Requests Messages\n For general guidelines, please see [Github's Pull Request](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request) page.\n \nIn the message, please include the following headers:\n\n* Description of the Issue or New Feature\n* Description of What Has Been Done\n* Usage\n  * Examples and/or how others might test the change\n* Assign a Reviewer - this will most likely be the Merge Master.  In the case of the Merge Master, this will be another appropriate contributor.\n\n### Coding conventions\nStart reading our code and you'll get the hang of it. We optimize for readability.\n\n  * Scripts should not be longer than 400-600 lines.\n  \n  * We use [roxygen2](https://cran.r-project.org/package=roxygen2), with [Markdown syntax](https://cran.r-project.org/web/packages/roxygen2/vignettes/rd-formatting.html), for documentation.  \n\n  * Never use `rm(list = ls())` Why, you ask? Well first off, Jenny Bryan is likely to come [set your computer on fire](https://www.tidyverse.org/blog/2017/12/workflow-vs-script/).  More specifically, it mixes *your* workflow (i.e., personal choices) with *the* product (i.e., the R code needed by someone else to run your code).  See Jenny's in-depth discussion at the link above.\n\n  * Write functions. There's a good chance that your script can be simplified into a function. \"Everything that happens is a function call.\" - John Chambers\n  \n  * Always put spaces after list items and method parameters (1, 2, 3, not 1,2,3) and around operators (x + y = 1, not x+y=1).\n\n  * Eliminate unnecessary white space.  I realize this conflicts with the previous statement, but I'm comfortable with that ambiguity.\n\n  * Use a styler and IDE to keep your code clean.  [`stylr`](https://styler.r-lib.org/) is a good R package for keeping your code tidy and easy to use.\n  \n  * `tidyverse` methods, especially those using pipes, `%>%`, increase readability and make reviewing code much more pleasant.\n  \n  * When in doubt, consult the [`tidyverse` style guide](https://style.tidyverse.org/)\n  \nThis is collaborative software. Consider the people who will read your code, and make it look nice for them. It's sort of like driving a car: Perhaps you love doing donuts when you're alone, but with passengers the goal is to make the ride as smooth as possible.\n\n### File structure and conventions\nKeeping a tidy project requires maintaining order amongst files.\n\n  * General folder structure is:\n    * -- root\n        * -- data\n        * -- figures\n        * -- notes\n        * -- R\n        * -- scripts\n        * -- tables\n        * -- tests (optional)\n      \n  * root directory in addition to holding the folders (above), should only contain configuration and R package files.\n  \n  * data - holds any data files used in the project.\n  \n  * figures - holds any figure files created by the project.\n  \n  * notes - holds `TODO.Rmd`, `Notes.Rmd`, `SCRATCH.R/.Rmd` and reusable templates (for Roxygenating functions, headers for commenting code) or example code.  The `TODO.Rmd` is being worked on and what has recently been done and should closely mirror Git commits. `Notes.Rmd` is more narrative than `TODO` and contains important information that is too detailed/complex for a vignette.  Scratch files are sandboxes for working out code.\n  \n  * R - should hold only functions.  Each function should be called `<my-special-function-name>_function.R`.\n  \n  * scripts - these are the scripts that run the analysis.  Each script name should start with a number in the order the scripts are to be run.  The first script in the sequence is typically `0_Setup.R`.  `Setup.R` sets the paths for the project (this makes it reproducible on your machine!), loads all necessary libraries, date constants, functions, and data. The next script in the sequence might be, e.g., `1_Pre_Processing.R`, followed by `2_Data_Wrangling.R`, `3_Analysis.R`, `4_Plots.R`...note: these are just examples.\n  \n  * tables - holds any tables generated by the scripts.\n  \n  * tests - any unit tests that might be applicable. This is optional.\n  \n## Reviewing Pull Requests\n  * Open the pull request\n  * Review the code changes\n  * Reviewer - provide comments and feedback in GitHub\n  * Originator - respond to comments, perhaps add comments\n  * Approve changes (upper right corner) and add approval comment\n  * **Merge Master/Code owner merges all pull requests! Please do not merge your own pull request.** If the Merge Master is pushing code, then the reviewer should be responsible for merging the pull request.\n  * MergeMaster will delete the branch once the code has been merged.\n  * **DONT FORGET TO PULL the new code** to your local instance to get latest code.\n\n \n<!-- # Documentation -->\n\n<!-- This section includes any help you need with the documentation and where it can be found. Code needs explanation, and sometimes those who know the code well have trouble explaining it to someone just getting into it.  -->\n\n<!-- * Help us with documentation here -->\n\n* If you have further questions, contact: Jason Jannot jason.jannot@noaa.gov\n",
    "supporting": [
      "contributing_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}