---
engine: knitr
output-dir: _site
render: true
---
# Collaboration & Code Review {#071-collaborate.qmd}

## NOTE: These sections will be completed with input from all Analytical Services Program members during the Analytical Services Program Launch Meeting slated for early 2024.

## Collaboration using Git

Currently, this is an amalgamation of [Jason's Git Collaboration notes](https://docs.google.com/document/d/1lcchh6ggKS5-Sf7G3zwyRz1AA_XVxb7rc8Id_k5GEOo/edit#heading=h.k1i0lpeyjkx) and the [2024 ADP Team Charter](https://docs.google.com/document/d/1spu2uv0KmV2_aW64qwe2pJndPrSeHNEj1Utzi_lLpjU/edit#heading=h.84v7rojjdy4y)

:::: {.columns}

::: {.column width="45%"}   
 
<!-- <center><h2>Git Collaboration</h2></center> -->

Determining the ["Git Work Flow"](https://www.atlassian.com/git/tutorials/comparing-workflows) is a huge part of working in a team! Be sure to check out the "Guidelines" section in the previous link for best practices when developing a workflow.

:::

:::{.column width="5%"}

 <!-- empty to create space -->

:::

:::{.column width="45%"}


 ![](_img/git.png){height=200}
 
:::    

::::

> Jason suggests the Centralized Workflow (see link above) which keeps a linear history[^1].


[^1]:If you don't like the Centralized Workflow, try the [Trunk-based Workflow](https://www.atlassian.com/continuous-delivery/continuous-integration/trunk-based-development).

#### How to Collaborate
1. Add collaborators to repository    
2. Collaborators clone repository to their local machine    
3. Make changes    
    a. Create a New Branch    
    b. Name it appropriately e.g., jason/newfeature    
    c. Make changes locally on the new branch    
    d. Commit changes to the new branch    
        i. As a general rule, you should commit when you finish something that allows your code to work - usually ends up being a couple times an hour.    
    e. *See below before completing this step* - Push changes to the remote repository...this will create a pull request....    

#### Before Pushing to the Repository
1. Switch to your local main branch (`$git checkout main`)    
2. Pull the remote main into your local main (`$git pull origin main`)    
3. Switch to your dev branch (`$git checkout <your-dev-branch-name-here>`)    
4. Merge your local main to your local dev branch (`$git merge main`)    
    a. **NOTE** This is where conflicts will show up if they will occur    
    b. Fix any conflicts
5. Do some checking before pushing:    
    a. Check the commits that will be pushed (`$git log - - oneline`; `q` escapes you back to the `$`)    
    b. Check your connection (`$git remote -v`)    
6. Push your changes (`$git push origin <your-branch-name>`)

## Code Review
### Pull Request
A pull request is a request by a collaborator for the repo owner to "pull" the new code into the main branch (or other branch) which will then reflect those changes on the remote repos when others pull that branch down.

##### Pull Request - What are they good for?
Pull request can simplify code review.  They are a discussion point between coders. They can be used to:    

- review and discuss code: a new feature, improvements, strategy, etc.
- address issues
- any time new code is added to the repo

**What are the benefits of pull requests as code review[^2]?**    

1. Increases the quality of the code
2. Decreases probability of breaking stuff 
3. Frees time from micromanaging other peoples code
4. Reduces the need for meetings
5. Email notifications act as the interface
6. They create a history - all discussion & code (even if it is ultimately rejected), lives on a branch

The downsides include (see also^2^):    
1. You have to wait to have your code reviewed by others    
2. Reviewer can get backed up & overwhelmed

[^2]: For a counter argument to pull requests, [see this video](https://youtu.be/ASOSEiJCyEM?t=275)

##### How to Submit a Pull Request

1. Go to the repo, at the top click on `Pull Requests`    
2. Create a `New Pull Request` (green button upper right)    
3. Ensure you are comparing the right branches    
4. Look at the `gitdiff`    
5. Give it an appropriate succint title    
6. Include a descriptive message    
    a. What has been done    
    b. How to use the new code    
    c. What someone could do to test the code, e.g., do...    
7. Create the request    
8. Add a reviewer - upper right hand corner. Will trigger an email.    
9. Once reviewed, the pull request will be merged with the branch (typically main)

NOTE: You can add more commits to a single pull request, provided it has not been reviewed and merged. *However*, only do this for very minor changes - missing spaces, typos, missing last lines etc.

##### How to Review a Pull Request
1. Open the pull request    
2. Review the code changes    
3. Reviewer - provide comments and feedback as comments    
4. Originator - respond to comments, perhaps add comments    
5. Reviewer - Approve changes (upper right corner) and add approval comment    
6. Reviewer - merge pull request    
7. Originator -  delete the branch once the code has been merged. *Please do this so that our remote is clean!*    
8. *DONT FORGET TO PULL* the new code to your local instance to get latest code.

## Issues

Issues are a great way to improve code outside the normal pull request-review process.  Issues can be used to propose:    

1. Fixes to broken code    
2. Cool new features    
3. Tackle TODO lists    
4. Document Q&A

Use `tags` (right sidebar) to highlight the type of issue being submitted.

### How to submit an Issue
1. Open an issue    
2. Give it a succinct but appropriate name    
3. Give it a `tag`    
4. Use the `@` in the body of the issue to mention others who might be interested or involved in the issue resolution    
5. Use simple pseudo-code (via Markup code) to describe your proposed changes.    
6. Provide a minimal reproducible example for bugs/errors, a.k.a. a [repex](https://stackoverflow.com/help/minimal-reproducible-example)    
7. Be sure to close the issue once it is complete.    
    a. Pro Tip: You can use the following statement to make Github automatically close an issue:    
    `this closes issue #<insert-issue-num>` [see example here](https://github.com/jjannot-NOAA/PlantSamplingAnalysis/issues/5#issuecomment-1480164759)

### Assigning Issues
1. Feel free to assign yourself the issue, but be sure to eventually tackle the issue.
2. *BEFORE ASSIGNING TO OTHERS* discuss with the other person and/or the PM to ensure assignment is appropriate and does not conflict with current priorities.

## Compare Two Branches on GitHub 
1. Open the branch with the newest commits
2. At the top you’ll see the number of commits difference like this:

![](_img/github_compare_2_branches.png)

3. Click on the link “\<\#\> commit ahead”
4. That will bring you to the diff page! Voila!

## To link a pull request with an issue

[Link Pull Request with Issue](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue)

See [More Git](999-more-git.qmd) for additional Git tips and resources.
